'''
Simple app that contains student info, where students may log in to add/change/remove courses from their details. It also requires that they login according to their accounts (only admins may create these accounts) to change any of their information.
New students and their details can be added with administrative rights.

'''

from flask import Flask
from flask import url_for,json,Response,jsonify,request
from functools import wraps
app = Flask(__name__)

names = [{'login':'bob','password':'secret1'},{'login':'jane','password':'secret1'},{'login':'admin','password':'secret'}]
student_info = [{'name':'bob','sid':1001234,'pillar':'istd','courseid1':50003,'courseid2':50012},{'name':'jane','sid':1001345}]

#allows students registered in the database to login
def auth(username, password):
	for loginpasspair in names:
		if (username == loginpasspair['login']):
			global userLogin
			userLogin = loginpasspair['login']
			return username == loginpasspair['login'] and password == loginpasspair['password']

#produces the authentication required pop up box
def authenticate():
	message = {'message':"Please authenticate."}
	resp = jsonify(message)
	resp.status_code=401
	resp.headers['WWW-Authenticate']='Basic realm="Please enter your User Name and Password to proceed"'
	return resp

#checks that login info is correct
def requireAuth(f):
	@wraps(f)
	def decorated(*args, **kwargs):
		autho = request.authorization
		if not autho:
			return authenticate()
		elif not auth(autho.username, autho.password):
			return authenticate()
		return f(*args, **kwargs)	
	return decorated

#only allows administrators or students with access from admin to access the website
@app.route('/')
@requireAuth
def homepage():
	global user
	if userLogin == 'admin':
		user = student_info
	else: 
		for studentsInfo in student_info:
			if studentsInfo['name'] == userLogin:
				user = studentsInfo	
	return 'Welcome!!'

#allows ONLY administrators to create accounts for students to login
#sample curl method (only works with admin rights): curl http://127.0.0.1:5000/add_student/bobby/password
@app.route('/add_student/<username>/<password>', methods = ['GET','POST','PUT'])
def add_student(username,password):
	if userLogin == 'admin':
		temp = {'login':username,'password':password}
		names.append(temp)	
		return "You have successfully added a student"
	return "You are not authorized to create student accounts"

#allows ONLY administrators to see student accounts
#sample curl method (only works with admin rights): curl http://127.0.0.1:5000/view_accounts
@app.route('/view_accounts', methods = ['GET'])
def view_accounts():
	if userLogin == 'admin':
		js = json.dumps(names)
		resp = Response(js, status=200,mimetype='application/json')
		return resp
	return "You are not authorized to view these details"

#allows administrators to add student details to the database
#sample curl method (only works with admin rights): curl -H "Content-type: application/json" \ -X POST http://127.0.0.1:5000/add_student_details -d '{"name":"John","sid":"1001234","pillar":"istd"}'
@app.route('/add_student_details',methods=['GET','POST'])
def add_Student_Details():
	if userLogin == 'admin':
		if request.headers['Content-Type'] == 'application/json':
			details = request.get_json()
			if 'name' in details and 'sid' in details and 'pillar' in details:
				temp = {'name':details['name'],'sid':details['sid'],'pillar':details['pillar']}
				student_info.append(temp)
				return "You have successfully added a student's details into the database"
		elif request.headers['Content-Type'] == 'text/plain':
			details = request.data.split()
			name = details[0].decode("utf-8")
			sid = details[0].decode("utf-8")
			pillar = details[0].decode("utf-8")
			temp = {'name': name, 'sid':sid, 'pillar':pillar}
			student_info.append(temp)
			return "You have successfully added a student's details into the database"
	return "You are not authorized to change student details"

#allows students or administrator to check their current details
#sample curl method: curl http://127.0.0.1:5000/get_details
@app.route('/get_details', methods = ['GET'])
def get_Details():
	js = json.dumps(user)
	resp = Response(js, status=200, mimetype='application/json')
	return resp

#allows students ONLY to add or update their current details
#sample curl method (does not work with admin rights): curl http://127.0.0.1:5000/add_details/gender/male -X PUT
@app.route('/add_details/<header>/<detail>', methods = ['GET','POST','PUT'])
@app.errorhandler(404)
def add_Details(header,detail):
	if userLogin == 'admin':
		return "Log into your student account to update your student details"
	user[header]=detail
	return "You have successfully added/updated " + header + " to your details"

#allows students ONLY to delete their current details
#sample curl method (does not work with admin rights): curl http://127.0.0.1:5000/remove_details/pillar -X DELETE
@app.route('/remove_details/<header>', methods = ['GET','DELETE'])
@app.errorhandler(404)
def remove_Details(header):
	if userLogin == 'admin':
			return "Log into your student account to update your student details"
	if header in user:
		del user[header]			
		return "You have successfully removed " + header + " from your details"
	resp = jsonify({'message': 'Unsuccessful attempt to change your details'})
	resp.status_code = 404
	return resp

if __name__=='__main__':
	app.run()


